# -*- coding: utf-8 -*-
"""Prodigy_Infotech_DS_Task-02.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QvjRj1PqzCjJCScra5uHVGfakqvV4AeW

# Prodigy Infotech

Author: Aarti Wani

Data Science Intern

Task-02

Task: Perform data cleaning and exploratory data analysis (EDA) on a dataset of your choice, such as the Titanic dataset from Kaggle. Explore the relationships between variables and identify patterns and trends in the data.
"""

# Loading the libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Loading in-built titanic dataset
df=sns.load_dataset('titanic')

"""# Data Understanding"""

# Checking first 5 records
df.head()

# Checking last 5 records
df.tail()

# Checking dimensions of the dataset
df.shape

# Checking data type
df.info()

# Checking 5 variable summary
df.describe()

# Checking unique values
df.nunique()

#visualizing the distribution of categorical variable
for column in categorical_features:
  plt.figure(figsize=(8,6))
  sns.countplot(x=column,palette='Set2',data=df)
  plt.title(column)
  plt.show()

#visualizing the distribution of continuous variable
bins=[10,20,30,40,50,60,70,80,90]
for column in continuos_features:
  plt.figure(figsize=(8,6))
  sns.histplot(x=column,bins=bins,data=df,color='cornflowerblue')
  plt.title(column)
  plt.show()

"""# Data Cleaning"""

# Checking missing values
df.isnull().sum()

# Imputing missing values of categorical features
categorical_features=df.select_dtypes(include=('object','category'))
for column in categorical_features:
  df[column]=df[column].fillna(df[column].mode()[0])

# Imputing missing values of continuous features
continuos_features=df.select_dtypes(include='float64')
for column in continuos_features:
  df[column]=df[column].fillna(df[column].mean())

df.isnull().sum()

# Checking duplicated values
df.duplicated().sum()

# Removing duplicated values
df=df.drop_duplicates()
df.duplicated().sum()

# outlier detection and removal
for column in continuos_features:
  plt.figure(figsize=(8,8))
  sns.boxplot(y=df[column],data=df,color='#9ef542')
  plt.show()

# outliers are present in both age & fare column

for column in continuos_features:
  q1=df[column].quantile(0.25)
  q3=df[column].quantile(0.75)
  IQR=q3-q1
  l_limit=q1-(IQR*1.5)
  u_limit=q3+(IQR*1.5)
  df.loc[df[column]<l_limit,column]=l_limit
  df.loc[df[column]>u_limit,column]=u_limit

for column in continuos_features:
  plt.figure(figsize=(8,8))
  sns.boxplot(y=df[column],color='#9ef542',data=df)
  plt.show()

"""

#  Relationship Analysis


"""

# Checking how many people were survived
# 1 means 'Yes' 0 means 'No'
sns.countplot(x=df['survived'],palette='Set2')
plt.title('No. of people survived')
# from graph it is clear that count of people survived is less.

sns.countplot(x=df['sex'],hue=df['survived'],palette='Set2')

sns.barplot(x='sex',y='survived',palette='Set2',data=df)

pd.crosstab(df['sex'],df['survived'])
# it shows that 233 female were survived and 109 male were survived. the survival rate is more for female than male

sns.barplot(x='embarked',y='survived',palette='Paired',data=df)
plt.title('Embarked Vs Survival')
# people who embarked at cherbourg have more chances of survival

sns.countplot(x='pclass',hue='survived',data=df,palette='Set2')
plt.title('pclass: survived vs dead')
# it is clear that survival rate is higher for class 1 passenger.

sns.barplot(x='pclass',y='survived',palette='Paired',data=df)
plt.title('Pclass Vs Survived')
# class 1 65% survived more than class 2 & 3 passengers. class of passengers is related to the survival

sns.barplot(x='survived',y='fare',palette='Set2',data=df)
plt.title('fare Vs Survived')
# higher the fare, higher the chances of survival

sns.barplot(x='survived',y='age',palette='Set2',data=df)
plt.title('Age Vs Survived')
# people whom age is less than 27 are survived

sns.lineplot(x='age',y='fare',hue='pclass',data=df,palette='flare')
plt.title('Age Vs Fare')
# It is clear that people with class1 have more fare.